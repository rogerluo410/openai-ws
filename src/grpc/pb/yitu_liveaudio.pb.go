// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: yitu_liveaudio.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 音频的编码
type AudioConfig_AudioEncoding int32

const (
	AudioConfig_UNSPECIFIED AudioConfig_AudioEncoding = 0
	AudioConfig_PCM         AudioConfig_AudioEncoding = 1
)

// Enum value maps for AudioConfig_AudioEncoding.
var (
	AudioConfig_AudioEncoding_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PCM",
	}
	AudioConfig_AudioEncoding_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PCM":         1,
	}
)

func (x AudioConfig_AudioEncoding) Enum() *AudioConfig_AudioEncoding {
	p := new(AudioConfig_AudioEncoding)
	*p = x
	return p
}

func (x AudioConfig_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioConfig_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_yitu_liveaudio_proto_enumTypes[0].Descriptor()
}

func (AudioConfig_AudioEncoding) Type() protoreflect.EnumType {
	return &file_yitu_liveaudio_proto_enumTypes[0]
}

func (x AudioConfig_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioConfig_AudioEncoding.Descriptor instead.
func (AudioConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{0, 0}
}

// 转写的语言
type SpeechConfig_Language int32

const (
	SpeechConfig_UNSPECIFIED SpeechConfig_Language = 0
	SpeechConfig_MANDARIN    SpeechConfig_Language = 1
	SpeechConfig_ENGLISH     SpeechConfig_Language = 2
)

// Enum value maps for SpeechConfig_Language.
var (
	SpeechConfig_Language_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MANDARIN",
		2: "ENGLISH",
	}
	SpeechConfig_Language_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MANDARIN":    1,
		"ENGLISH":     2,
	}
)

func (x SpeechConfig_Language) Enum() *SpeechConfig_Language {
	p := new(SpeechConfig_Language)
	*p = x
	return p
}

func (x SpeechConfig_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeechConfig_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_yitu_liveaudio_proto_enumTypes[1].Descriptor()
}

func (SpeechConfig_Language) Type() protoreflect.EnumType {
	return &file_yitu_liveaudio_proto_enumTypes[1]
}

func (x SpeechConfig_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeechConfig_Language.Descriptor instead.
func (SpeechConfig_Language) EnumDescriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{1, 0}
}

// 情景模式，目前仅支持通用0
type SpeechConfig_Scene int32

const (
	SpeechConfig_GENERALSCENE SpeechConfig_Scene = 0
)

// Enum value maps for SpeechConfig_Scene.
var (
	SpeechConfig_Scene_name = map[int32]string{
		0: "GENERALSCENE",
	}
	SpeechConfig_Scene_value = map[string]int32{
		"GENERALSCENE": 0,
	}
)

func (x SpeechConfig_Scene) Enum() *SpeechConfig_Scene {
	p := new(SpeechConfig_Scene)
	*p = x
	return p
}

func (x SpeechConfig_Scene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeechConfig_Scene) Descriptor() protoreflect.EnumDescriptor {
	return file_yitu_liveaudio_proto_enumTypes[2].Descriptor()
}

func (SpeechConfig_Scene) Type() protoreflect.EnumType {
	return &file_yitu_liveaudio_proto_enumTypes[2]
}

func (x SpeechConfig_Scene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeechConfig_Scene.Descriptor instead.
func (SpeechConfig_Scene) EnumDescriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{1, 1}
}

// 识别类型（0-全部，1-仅逐句, 2-仅逐字）
type SpeechConfig_RecognizeType int32

const (
	SpeechConfig_ALL       SpeechConfig_RecognizeType = 0
	SpeechConfig_UTTERANCE SpeechConfig_RecognizeType = 1
	SpeechConfig_STREAMING SpeechConfig_RecognizeType = 2
)

// Enum value maps for SpeechConfig_RecognizeType.
var (
	SpeechConfig_RecognizeType_name = map[int32]string{
		0: "ALL",
		1: "UTTERANCE",
		2: "STREAMING",
	}
	SpeechConfig_RecognizeType_value = map[string]int32{
		"ALL":       0,
		"UTTERANCE": 1,
		"STREAMING": 2,
	}
)

func (x SpeechConfig_RecognizeType) Enum() *SpeechConfig_RecognizeType {
	p := new(SpeechConfig_RecognizeType)
	*p = x
	return p
}

func (x SpeechConfig_RecognizeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeechConfig_RecognizeType) Descriptor() protoreflect.EnumDescriptor {
	return file_yitu_liveaudio_proto_enumTypes[3].Descriptor()
}

func (SpeechConfig_RecognizeType) Type() protoreflect.EnumType {
	return &file_yitu_liveaudio_proto_enumTypes[3]
}

func (x SpeechConfig_RecognizeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeechConfig_RecognizeType.Descriptor instead.
func (SpeechConfig_RecognizeType) EnumDescriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{1, 2}
}

// 音频相关设置
type AudioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aue AudioConfig_AudioEncoding `protobuf:"varint,1,opt,name=aue,proto3,enum=grpcServer.AudioConfig_AudioEncoding" json:"aue,omitempty"`
	// 采样率（范围为8000和16000）
	SampleRate int32 `protobuf:"varint,8000,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
}

func (x *AudioConfig) Reset() {
	*x = AudioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioConfig) ProtoMessage() {}

func (x *AudioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioConfig.ProtoReflect.Descriptor instead.
func (*AudioConfig) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{0}
}

func (x *AudioConfig) GetAue() AudioConfig_AudioEncoding {
	if x != nil {
		return x.Aue
	}
	return AudioConfig_UNSPECIFIED
}

func (x *AudioConfig) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

// 识别相关设置
type SpeechConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang  SpeechConfig_Language `protobuf:"varint,1,opt,name=lang,proto3,enum=grpcServer.SpeechConfig_Language" json:"lang,omitempty"`
	Scene SpeechConfig_Scene    `protobuf:"varint,2,opt,name=scene,proto3,enum=grpcServer.SpeechConfig_Scene" json:"scene,omitempty"`
	// 自定义词语（支持中文2-4个字，中英混合4-8个字符）
	CustomWord []string `protobuf:"bytes,3,rep,name=customWord,proto3" json:"customWord,omitempty"`
	// 使用已经上传的自定义词库，填写词库ID。（词语及词库总词数不超过1000个，支持中文2-4个字，中英混合4-8个字符）
	UseCustomWordsId []int32                    `protobuf:"varint,4,rep,packed,name=useCustomWordsId,proto3" json:"useCustomWordsId,omitempty"`
	RecognizeType    SpeechConfig_RecognizeType `protobuf:"varint,5,opt,name=recognizeType,proto3,enum=grpcServer.SpeechConfig_RecognizeType" json:"recognizeType,omitempty"`
	// 统一数字的转换方式。默认false，开启阿拉伯数字能力。true，关闭阿拉伯数字能力。
	DisableConvertNumber bool `protobuf:"varint,6,opt,name=disableConvertNumber,proto3" json:"disableConvertNumber,omitempty"`
	// 加标点。默认false，开启添加标点。true，关闭添加标点。
	DisablePunctuation bool `protobuf:"varint,7,opt,name=disablePunctuation,proto3" json:"disablePunctuation,omitempty"`
	// 指定规则替换文本
	WordsReplace *WordsReplace `protobuf:"bytes,8,opt,name=wordsReplace,proto3" json:"wordsReplace,omitempty"`
	// 关键词识别。转写结果中返回同音词。（支持词库总数不超过30个。支持中文2-4个字）*
	KeyWords []string `protobuf:"bytes,9,rep,name=keyWords,proto3" json:"keyWords,omitempty"`
}

func (x *SpeechConfig) Reset() {
	*x = SpeechConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechConfig) ProtoMessage() {}

func (x *SpeechConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechConfig.ProtoReflect.Descriptor instead.
func (*SpeechConfig) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{1}
}

func (x *SpeechConfig) GetLang() SpeechConfig_Language {
	if x != nil {
		return x.Lang
	}
	return SpeechConfig_UNSPECIFIED
}

func (x *SpeechConfig) GetScene() SpeechConfig_Scene {
	if x != nil {
		return x.Scene
	}
	return SpeechConfig_GENERALSCENE
}

func (x *SpeechConfig) GetCustomWord() []string {
	if x != nil {
		return x.CustomWord
	}
	return nil
}

func (x *SpeechConfig) GetUseCustomWordsId() []int32 {
	if x != nil {
		return x.UseCustomWordsId
	}
	return nil
}

func (x *SpeechConfig) GetRecognizeType() SpeechConfig_RecognizeType {
	if x != nil {
		return x.RecognizeType
	}
	return SpeechConfig_ALL
}

func (x *SpeechConfig) GetDisableConvertNumber() bool {
	if x != nil {
		return x.DisableConvertNumber
	}
	return false
}

func (x *SpeechConfig) GetDisablePunctuation() bool {
	if x != nil {
		return x.DisablePunctuation
	}
	return false
}

func (x *SpeechConfig) GetWordsReplace() *WordsReplace {
	if x != nil {
		return x.WordsReplace
	}
	return nil
}

func (x *SpeechConfig) GetKeyWords() []string {
	if x != nil {
		return x.KeyWords
	}
	return nil
}

// 指定规则替换文本
type WordsReplace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 待替换的文本。最多支持100个词
	Keywords []string `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
	// 替换后的字符。不指定时替换为空。最多支持100个符号，和待替换文本一一对应
	Replace []string `protobuf:"bytes,2,rep,name=replace,proto3" json:"replace,omitempty"`
}

func (x *WordsReplace) Reset() {
	*x = WordsReplace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordsReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordsReplace) ProtoMessage() {}

func (x *WordsReplace) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordsReplace.ProtoReflect.Descriptor instead.
func (*WordsReplace) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{2}
}

func (x *WordsReplace) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *WordsReplace) GetReplace() []string {
	if x != nil {
		return x.Replace
	}
	return nil
}

// 音频流请求的相关设置。
type StreamingSpeechConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 音频设置。
	AudioConfig *AudioConfig `protobuf:"bytes,1,opt,name=audioConfig,proto3" json:"audioConfig,omitempty"`
	// 识别设置。
	SpeechConfig *SpeechConfig `protobuf:"bytes,2,opt,name=speechConfig,proto3" json:"speechConfig,omitempty"`
}

func (x *StreamingSpeechConfig) Reset() {
	*x = StreamingSpeechConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSpeechConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechConfig) ProtoMessage() {}

func (x *StreamingSpeechConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechConfig.ProtoReflect.Descriptor instead.
func (*StreamingSpeechConfig) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{3}
}

func (x *StreamingSpeechConfig) GetAudioConfig() *AudioConfig {
	if x != nil {
		return x.AudioConfig
	}
	return nil
}

func (x *StreamingSpeechConfig) GetSpeechConfig() *SpeechConfig {
	if x != nil {
		return x.SpeechConfig
	}
	return nil
}

// 流请求
type StreamingSpeechRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一个流的请求，需要先发送设置，然后发送音频数据
	//
	// Types that are assignable to RequestPayload:
	//	*StreamingSpeechRequest_StreamingSpeechConfig
	//	*StreamingSpeechRequest_AudioData
	RequestPayload isStreamingSpeechRequest_RequestPayload `protobuf_oneof:"requestPayload"`
}

func (x *StreamingSpeechRequest) Reset() {
	*x = StreamingSpeechRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechRequest) ProtoMessage() {}

func (x *StreamingSpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechRequest.ProtoReflect.Descriptor instead.
func (*StreamingSpeechRequest) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{4}
}

func (m *StreamingSpeechRequest) GetRequestPayload() isStreamingSpeechRequest_RequestPayload {
	if m != nil {
		return m.RequestPayload
	}
	return nil
}

func (x *StreamingSpeechRequest) GetStreamingSpeechConfig() *StreamingSpeechConfig {
	if x, ok := x.GetRequestPayload().(*StreamingSpeechRequest_StreamingSpeechConfig); ok {
		return x.StreamingSpeechConfig
	}
	return nil
}

func (x *StreamingSpeechRequest) GetAudioData() []byte {
	if x, ok := x.GetRequestPayload().(*StreamingSpeechRequest_AudioData); ok {
		return x.AudioData
	}
	return nil
}

type isStreamingSpeechRequest_RequestPayload interface {
	isStreamingSpeechRequest_RequestPayload()
}

type StreamingSpeechRequest_StreamingSpeechConfig struct {
	// 音频流设置
	StreamingSpeechConfig *StreamingSpeechConfig `protobuf:"bytes,1,opt,name=streamingSpeechConfig,proto3,oneof"`
}

type StreamingSpeechRequest_AudioData struct {
	// 音频数据。每个请求的音频长度最长为60秒。针对实时场景，音频输入的速度超过实时时，性能无法保障，需与依图沟通
	AudioData []byte `protobuf:"bytes,2,opt,name=audioData,proto3,oneof"`
}

func (*StreamingSpeechRequest_StreamingSpeechConfig) isStreamingSpeechRequest_RequestPayload() {}

func (*StreamingSpeechRequest_AudioData) isStreamingSpeechRequest_RequestPayload() {}

// 音频流识别请求回应
type StreamingSpeechResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 此次实时处理的全局唯一ID。
	GlobalStreamId string `protobuf:"bytes,1,opt,name=globalStreamId,proto3" json:"globalStreamId,omitempty"`
	// 返回识别结果
	Result *StreamingSpeechResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// 返回识别状态
	Status *StreamingSpeechStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StreamingSpeechResponse) Reset() {
	*x = StreamingSpeechResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechResponse) ProtoMessage() {}

func (x *StreamingSpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechResponse.ProtoReflect.Descriptor instead.
func (*StreamingSpeechResponse) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingSpeechResponse) GetGlobalStreamId() string {
	if x != nil {
		return x.GlobalStreamId
	}
	return ""
}

func (x *StreamingSpeechResponse) GetResult() *StreamingSpeechResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *StreamingSpeechResponse) GetStatus() *StreamingSpeechStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// 音频识别结果
type StreamingSpeechResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 此识别结果是否为最终结果
	IsFinal bool `protobuf:"varint,1,opt,name=isFinal,proto3" json:"isFinal,omitempty"`
	// 最好的转写候选
	BestTranscription *StreamingTranscription `protobuf:"bytes,2,opt,name=bestTranscription,proto3" json:"bestTranscription,omitempty"`
}

func (x *StreamingSpeechResult) Reset() {
	*x = StreamingSpeechResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSpeechResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechResult) ProtoMessage() {}

func (x *StreamingSpeechResult) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechResult.ProtoReflect.Descriptor instead.
func (*StreamingSpeechResult) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{6}
}

func (x *StreamingSpeechResult) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *StreamingSpeechResult) GetBestTranscription() *StreamingTranscription {
	if x != nil {
		return x.BestTranscription
	}
	return nil
}

// 音频当前识别状态
type StreamingSpeechStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前音频处理进行到的时间点（音频开始时间为0）
	ProcessedTimestamp int64 `protobuf:"varint,1,opt,name=processedTimestamp,proto3" json:"processedTimestamp,omitempty"`
}

func (x *StreamingSpeechStatus) Reset() {
	*x = StreamingSpeechStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingSpeechStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechStatus) ProtoMessage() {}

func (x *StreamingSpeechStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechStatus.ProtoReflect.Descriptor instead.
func (*StreamingSpeechStatus) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{7}
}

func (x *StreamingSpeechStatus) GetProcessedTimestamp() int64 {
	if x != nil {
		return x.ProcessedTimestamp
	}
	return 0
}

// 转写
type StreamingTranscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 转写结果
	TranscribedText string `protobuf:"bytes,1,opt,name=transcribedText,proto3" json:"transcribedText,omitempty"`
	// 转写结果中包含热词的内容
	KeyWordsType []*KeyWordsType `protobuf:"bytes,2,rep,name=keyWordsType,proto3" json:"keyWordsType,omitempty"`
	// 转写结果的分解（只对final状态结果有效，返回每个字及标点的详细信息）
	Piece []*StreamingTranscriptionPiece `protobuf:"bytes,3,rep,name=piece,proto3" json:"piece,omitempty"`
}

func (x *StreamingTranscription) Reset() {
	*x = StreamingTranscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranscription) ProtoMessage() {}

func (x *StreamingTranscription) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranscription.ProtoReflect.Descriptor instead.
func (*StreamingTranscription) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{8}
}

func (x *StreamingTranscription) GetTranscribedText() string {
	if x != nil {
		return x.TranscribedText
	}
	return ""
}

func (x *StreamingTranscription) GetKeyWordsType() []*KeyWordsType {
	if x != nil {
		return x.KeyWordsType
	}
	return nil
}

func (x *StreamingTranscription) GetPiece() []*StreamingTranscriptionPiece {
	if x != nil {
		return x.Piece
	}
	return nil
}

//转写结果中包含关键词KeyWords的内容
type KeyWordsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 命中的关键词KeyWords。返回不多于10个。
	KeyWords string `protobuf:"bytes,1,opt,name=keyWords,proto3" json:"keyWords,omitempty"`
	// 命中的关键词KeyWords相应的分数。分数越高表示和关键词越相似，对应kws中的分数。
	KeyWordsScore  float32 `protobuf:"fixed32,2,opt,name=keyWordsScore,proto3" json:"keyWordsScore,omitempty"`
	StartTimestamp int32   `protobuf:"varint,3,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"` // 音频中对应的起始时间
	EndTimestamp   int32   `protobuf:"varint,4,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`     // 音频中对应的结束时间
}

func (x *KeyWordsType) Reset() {
	*x = KeyWordsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyWordsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyWordsType) ProtoMessage() {}

func (x *KeyWordsType) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyWordsType.ProtoReflect.Descriptor instead.
func (*KeyWordsType) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{9}
}

func (x *KeyWordsType) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *KeyWordsType) GetKeyWordsScore() float32 {
	if x != nil {
		return x.KeyWordsScore
	}
	return 0
}

func (x *KeyWordsType) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *KeyWordsType) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

// 转写分解
type StreamingTranscriptionPiece struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 转写分解结果。
	TranscribedText string `protobuf:"bytes,1,opt,name=transcribedText,proto3" json:"transcribedText,omitempty"`
	// 分解开始时间（音频开始时间为0）。
	BeginTimestamp int64 `protobuf:"varint,2,opt,name=beginTimestamp,proto3" json:"beginTimestamp,omitempty"`
	// 分解结束时间（音频开始时间为0）。
	EndTimestamp int64 `protobuf:"varint,3,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	// 转写结果的类型，一个结果可以对应多的状态, 为以下状态按位与。
	//    TOKEN = 1;
	//    PUNCTUATION = 2;
	//    NUMBER = 4;
	//    PATCH = 8;
	//    DISFLUENCY = 16;
	TranscribedType int32 `protobuf:"varint,4,opt,name=transcribedType,proto3" json:"transcribedType,omitempty"`
}

func (x *StreamingTranscriptionPiece) Reset() {
	*x = StreamingTranscriptionPiece{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yitu_liveaudio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranscriptionPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranscriptionPiece) ProtoMessage() {}

func (x *StreamingTranscriptionPiece) ProtoReflect() protoreflect.Message {
	mi := &file_yitu_liveaudio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranscriptionPiece.ProtoReflect.Descriptor instead.
func (*StreamingTranscriptionPiece) Descriptor() ([]byte, []int) {
	return file_yitu_liveaudio_proto_rawDescGZIP(), []int{10}
}

func (x *StreamingTranscriptionPiece) GetTranscribedText() string {
	if x != nil {
		return x.TranscribedText
	}
	return ""
}

func (x *StreamingTranscriptionPiece) GetBeginTimestamp() int64 {
	if x != nil {
		return x.BeginTimestamp
	}
	return 0
}

func (x *StreamingTranscriptionPiece) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *StreamingTranscriptionPiece) GetTranscribedType() int32 {
	if x != nil {
		return x.TranscribedType
	}
	return 0
}

var File_yitu_liveaudio_proto protoreflect.FileDescriptor

var file_yitu_liveaudio_proto_rawDesc = []byte{
	0x0a, 0x14, 0x79, 0x69, 0x74, 0x75, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x37, 0x0a, 0x03, 0x61, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x61, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0xc0, 0x3e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x0d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x43, 0x4d, 0x10, 0x01, 0x22, 0xde, 0x04, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x34, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x57,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75,
	0x6e, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x36, 0x0a,
	0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x47, 0x4c,
	0x49, 0x53, 0x48, 0x10, 0x02, 0x22, 0x19, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x00,
	0x22, 0x36, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x54,
	0x54, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x44, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x90,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x15,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x11, 0x62, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x62, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x69, 0x65, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x05, 0x70,
	0x69, 0x65, 0x63, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xbd, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x65, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x73, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x79, 0x69, 0x74, 0x75, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x42,
	0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x50, 0x01, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_yitu_liveaudio_proto_rawDescOnce sync.Once
	file_yitu_liveaudio_proto_rawDescData = file_yitu_liveaudio_proto_rawDesc
)

func file_yitu_liveaudio_proto_rawDescGZIP() []byte {
	file_yitu_liveaudio_proto_rawDescOnce.Do(func() {
		file_yitu_liveaudio_proto_rawDescData = protoimpl.X.CompressGZIP(file_yitu_liveaudio_proto_rawDescData)
	})
	return file_yitu_liveaudio_proto_rawDescData
}

var file_yitu_liveaudio_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yitu_liveaudio_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_yitu_liveaudio_proto_goTypes = []interface{}{
	(AudioConfig_AudioEncoding)(0),      // 0: grpcServer.AudioConfig.AudioEncoding
	(SpeechConfig_Language)(0),          // 1: grpcServer.SpeechConfig.Language
	(SpeechConfig_Scene)(0),             // 2: grpcServer.SpeechConfig.Scene
	(SpeechConfig_RecognizeType)(0),     // 3: grpcServer.SpeechConfig.RecognizeType
	(*AudioConfig)(nil),                 // 4: grpcServer.AudioConfig
	(*SpeechConfig)(nil),                // 5: grpcServer.SpeechConfig
	(*WordsReplace)(nil),                // 6: grpcServer.WordsReplace
	(*StreamingSpeechConfig)(nil),       // 7: grpcServer.StreamingSpeechConfig
	(*StreamingSpeechRequest)(nil),      // 8: grpcServer.StreamingSpeechRequest
	(*StreamingSpeechResponse)(nil),     // 9: grpcServer.StreamingSpeechResponse
	(*StreamingSpeechResult)(nil),       // 10: grpcServer.StreamingSpeechResult
	(*StreamingSpeechStatus)(nil),       // 11: grpcServer.StreamingSpeechStatus
	(*StreamingTranscription)(nil),      // 12: grpcServer.StreamingTranscription
	(*KeyWordsType)(nil),                // 13: grpcServer.KeyWordsType
	(*StreamingTranscriptionPiece)(nil), // 14: grpcServer.StreamingTranscriptionPiece
}
var file_yitu_liveaudio_proto_depIdxs = []int32{
	0,  // 0: grpcServer.AudioConfig.aue:type_name -> grpcServer.AudioConfig.AudioEncoding
	1,  // 1: grpcServer.SpeechConfig.lang:type_name -> grpcServer.SpeechConfig.Language
	2,  // 2: grpcServer.SpeechConfig.scene:type_name -> grpcServer.SpeechConfig.Scene
	3,  // 3: grpcServer.SpeechConfig.recognizeType:type_name -> grpcServer.SpeechConfig.RecognizeType
	6,  // 4: grpcServer.SpeechConfig.wordsReplace:type_name -> grpcServer.WordsReplace
	4,  // 5: grpcServer.StreamingSpeechConfig.audioConfig:type_name -> grpcServer.AudioConfig
	5,  // 6: grpcServer.StreamingSpeechConfig.speechConfig:type_name -> grpcServer.SpeechConfig
	7,  // 7: grpcServer.StreamingSpeechRequest.streamingSpeechConfig:type_name -> grpcServer.StreamingSpeechConfig
	10, // 8: grpcServer.StreamingSpeechResponse.result:type_name -> grpcServer.StreamingSpeechResult
	11, // 9: grpcServer.StreamingSpeechResponse.status:type_name -> grpcServer.StreamingSpeechStatus
	12, // 10: grpcServer.StreamingSpeechResult.bestTranscription:type_name -> grpcServer.StreamingTranscription
	13, // 11: grpcServer.StreamingTranscription.keyWordsType:type_name -> grpcServer.KeyWordsType
	14, // 12: grpcServer.StreamingTranscription.piece:type_name -> grpcServer.StreamingTranscriptionPiece
	8,  // 13: grpcServer.SpeechRecognition.RecognizeStream:input_type -> grpcServer.StreamingSpeechRequest
	9,  // 14: grpcServer.SpeechRecognition.RecognizeStream:output_type -> grpcServer.StreamingSpeechResponse
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_yitu_liveaudio_proto_init() }
func file_yitu_liveaudio_proto_init() {
	if File_yitu_liveaudio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yitu_liveaudio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordsReplace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSpeechConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSpeechRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSpeechResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSpeechResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingSpeechStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyWordsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yitu_liveaudio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranscriptionPiece); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yitu_liveaudio_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StreamingSpeechRequest_StreamingSpeechConfig)(nil),
		(*StreamingSpeechRequest_AudioData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yitu_liveaudio_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yitu_liveaudio_proto_goTypes,
		DependencyIndexes: file_yitu_liveaudio_proto_depIdxs,
		EnumInfos:         file_yitu_liveaudio_proto_enumTypes,
		MessageInfos:      file_yitu_liveaudio_proto_msgTypes,
	}.Build()
	File_yitu_liveaudio_proto = out.File
	file_yitu_liveaudio_proto_rawDesc = nil
	file_yitu_liveaudio_proto_goTypes = nil
	file_yitu_liveaudio_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpeechRecognitionClient is the client API for SpeechRecognition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpeechRecognitionClient interface {
	// 传入metadata "x-api-key"作为验证。
	RecognizeStream(ctx context.Context, opts ...grpc.CallOption) (SpeechRecognition_RecognizeStreamClient, error)
}

type speechRecognitionClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechRecognitionClient(cc grpc.ClientConnInterface) SpeechRecognitionClient {
	return &speechRecognitionClient{cc}
}

func (c *speechRecognitionClient) RecognizeStream(ctx context.Context, opts ...grpc.CallOption) (SpeechRecognition_RecognizeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpeechRecognition_serviceDesc.Streams[0], "/grpcServer.SpeechRecognition/RecognizeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechRecognitionRecognizeStreamClient{stream}
	return x, nil
}

type SpeechRecognition_RecognizeStreamClient interface {
	Send(*StreamingSpeechRequest) error
	Recv() (*StreamingSpeechResponse, error)
	grpc.ClientStream
}

type speechRecognitionRecognizeStreamClient struct {
	grpc.ClientStream
}

func (x *speechRecognitionRecognizeStreamClient) Send(m *StreamingSpeechRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechRecognitionRecognizeStreamClient) Recv() (*StreamingSpeechResponse, error) {
	m := new(StreamingSpeechResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechRecognitionServer is the server API for SpeechRecognition service.
type SpeechRecognitionServer interface {
	// 传入metadata "x-api-key"作为验证。
	RecognizeStream(SpeechRecognition_RecognizeStreamServer) error
}

// UnimplementedSpeechRecognitionServer can be embedded to have forward compatible implementations.
type UnimplementedSpeechRecognitionServer struct {
}

func (*UnimplementedSpeechRecognitionServer) RecognizeStream(SpeechRecognition_RecognizeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognizeStream not implemented")
}

func RegisterSpeechRecognitionServer(s *grpc.Server, srv SpeechRecognitionServer) {
	s.RegisterService(&_SpeechRecognition_serviceDesc, srv)
}

func _SpeechRecognition_RecognizeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechRecognitionServer).RecognizeStream(&speechRecognitionRecognizeStreamServer{stream})
}

type SpeechRecognition_RecognizeStreamServer interface {
	Send(*StreamingSpeechResponse) error
	Recv() (*StreamingSpeechRequest, error)
	grpc.ServerStream
}

type speechRecognitionRecognizeStreamServer struct {
	grpc.ServerStream
}

func (x *speechRecognitionRecognizeStreamServer) Send(m *StreamingSpeechResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechRecognitionRecognizeStreamServer) Recv() (*StreamingSpeechRequest, error) {
	m := new(StreamingSpeechRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SpeechRecognition_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcServer.SpeechRecognition",
	HandlerType: (*SpeechRecognitionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecognizeStream",
			Handler:       _SpeechRecognition_RecognizeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "yitu_liveaudio.proto",
}
